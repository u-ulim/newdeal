https://cafe.naver.com/tisuiux/2623

함수:function

자주 사용되는 프로그램을 별도로 저장한 해놓은것을 말한다.

​

​

함수의 종류​​

1. 명명함수(선언적함수)

함수명이 있는 함수로, 일반적으로 사용하는 방법, 프로그램에서 먼저 실행한다.

​

2. 익명함수(함수표현식) 

함수명이 없는 함수로써, 생성된 함수를 변수에 할당하여 사용

​

3. 즉시실행함수(IIFE)

생성과 동시에 실행되는 함수로 함수를 다시 호출할수 없다. 최초 한번의 실행만을 필요로하는 초기화 코드 부분

​

4.재귀함수

재귀 함수는 함수가 자기 자신을 호출하는 방식입니다. 주로 반복적인 작업을 수행하거나 트리 구조를 순회할 때 사용됩니다.

​

5.화살표 함수

화살표 함수는 ES6문법입니다. function 키워드 사용해서 함수를 만든 것보다 간단히 함수를 표현할 수 있습니다. 화살표 함수는 항상 익명입니다. 

​

함수종류

설명

예제

선언적함수(명명함수)

function 키워드를 사용하여 함수를 정의하는방식

호이스팅되어 선언 전에 호출가능

function 함수명(){

}

함수명();

함수표현식(익명함수)

함수를 변수에 할당하는 방식

const 변수명 = funciton(){

}

변수명()

화살표함수

ES6에 도입된 짧은 문법의 함수

​

let 함수명=(인자1,인자2) => 

즉시실행함수(IIFE)

정의되자마자 실행되는 함수

(function(){

})()

재귀함수

자기 자신을 호출하는 함수로 반복적인 작업을 수행할때 사용

function 함수명(인자1){

    함수명(값)

}

콜백함수

다른 함수의 인자로 전달되는 함수로, 비동기 작업에서 주로 사용

        function fetchData(callback) {

            setTimeout(() => {

                callback("Data fetched");

            }, 1000);

        }

        fetchData((message) => {

            console.log(message);

        });

명명함수(선언적함수)

1)

function 함수이름(){

      실행할 문장;

}

​

함수이름();

​

------------------------------------

2). 매개변수 함수

function 함수이름(매개변수){

      실행할 문장;

}

함수이름(값);

------------------------------------

3). 리턴 값  : 호출한 함수로 값을 돌려주는것, 함수가 변수로 사용된다.

function 함수이름(매개변수,매개변수){

    실행할 문장;

    return 변수;

}

​

var 변수 = 함수이름(값);

-----------------------------------------

4). arguments  매개변수

​

​

​

익명적함수()

var 변수명 = function(){

      실행할 문장;

}

​

변수명();

함수선언과 표현식(익명함수)의 차이점

함수선언은 호이스팅 됩니다.즉, 어느 위치에서나  호출될 수 있습니다. 하지만 익명선 함수는 반드시 이후에만 호출할수 있습니다.

​

​

​

​

즉시실행함수(IIFE)

생성과 동시에 실행되는 함수로 함수를 다시 호출할수 없다. 최초 한번의 실행만을 필요로하는 초기화 코드 부분

(function() {

  console.log('This function runs immediately!');

})();

​

(function(name) {

  console.log(`Hello, ${name}!`);

})('Bob');

재귀함수

재귀 함수는 함수가 자기 자신을 호출하는 방식입니다. 주로 반복적인 작업을 수행하거나 트리 구조를 순회할 때 사용됩니다.

function factorial(n) {

  if (n === 0) {

    return 1;

  } else {

    return n * factorial(n - 1);

  }

}

​

console.log(factorial(5));  // 120 출력

​

화살표함수

화살표 함수는 ES6문법입니다. function 키워드 사용해서 함수를 만든 것보다 간단히 함수를 표현할 수 있습니다. 화살표 함수는 항상 익명입니다. 두개는 용도가 다르다.

ES6에서는 함수의 매개변수에 기본값을 지정해 줄 수 있다.

function test(width=10,height=20,color="pink"){

​

}

*단, 주의해야할 점은 인자값으로 0 또는 false가 입력될 때 결과가 다르다. ES5에서는 || 처리 시 0 또는 false가 입력되어도 거짓이 되므로 기본값으로 대체된다. 하지만 ES6의 기본 매개변수를 사용하면 undefined를 제외한 입력된 모든 값(0, false)를 인정한다.

​

// 일반 함수

var foo = function () {

      console.log("foo") 

}; // foo

​

// 화살표 함수

var foo = () => console.log("foo"); // foo

1) 매개변수가 없는 경우

var foo = () => console.log('bar');

foo(); // bar

​

2)매개변수가 하나인 경우

var foo = x => x;

foo('bar'); // bar

​

3) 매개변수가 여려개인 경우

var foo = (a, b) => a + b; // 간단하게 한줄로 표현할 땐 "{}" 없이 값이 반환됩니다.

foo(1, 2); // 3

​

var foo = (a, b) => { return a + b }; 

foo(1, 2); // 3

​

var foo = (a, b) => { a + b }; // "{}"를 사용했는데 return이 없을 때 

foo(1, 2); // undefined

​

var foo = (a, b) => { // 여러줄 썼을 때

var c = 3;

return a + b + c;

}

foo(1, 2, 3) // 6

/*

"{}"를 사용하면 값을 반환할 때 return을 사용해야합니다.

"{}"를 사용하지 않으면 undefied를 반환합니다.

"{}"을 사용할 때는 여러줄을 썼을 때 사용합니다.

*/

​

4) 객체를 반환할 때

var foo = () => ( { a: 1, b: 2, c: 3 } );

foo(); // { a: 1, b: 2, c: 3 };

​

[화살표 함수 this]

일반 함수와 화살표 함수의 차이점이 있습니다. 일반함수가 전역 컨텍스트에서 실행될 때 this가 정의합니다. 화살표함수는 this를 정의하지 않습니다. 화살표 함수에서 this는 상위 스코프를 호출한다.

​

​

[일반함수는 자신이 종속된 객체를 this로 가리킨다]

 function blackDog(){

this.name="흰둥이";

   return{

      name:"검둥이",

      bark:function(){

         console.log(this.name+" 왈왈");

    }

   }

}

const black= new blackDog();

black.bark()//검둥이 왈왈

[화살표 함수는 자신이 종속된 인스턴스를 가리킨다.]

 function blackDog(){

this.name="흰둥이";

   return{

      name:"검둥이",

      bark:() => {

         console.log(this.name+" 왈왈");

    }

   }

}

const black= new blackDog();

black.bark()//흰둥이 왈왈

일반 함수를 사용하여 함수 this를 호출한 객체를 나타냅니다.

class Header { 

   constructor() { 

      this.color = "Red";

   } 

//Regular function: 

changeColor = function() {

     document.getElementById("demo").innerHTML += this;

    }

 }

​

 const myheader = new Header(); 

​

//The window object calls the function: 

window.addEventListener("load", myheader.changeColor); 

​

//A button object calls the function: 

document.getElementById("btn").addEventListener("click", myheader.changeColor);

화살표 함수를 사용하면 this누가 함수를 호출했는지에 관계없이 Header 객체를 나타냅니다.

class Header { constructor() { this.color = "Red"; } 

//Arrow function: 

changeColor = () => { 

      document.getElementById("demo").innerHTML += this;

    }

 }

​

 const myheader = new Header(); 

​

//The window object calls the function: 

window.addEventListener("load", myheader.changeColor); 

​

//A button object calls the function:

 document.getElementById("btn").addEventListener("click", myheader.changeColor);

https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions

화살표 함수 - JavaScript | MDN
화살표 함수 표현(arrow function expression)은 전통적인 함수표현(function)의 간편한 대안입니다. 하지만, 화살표 함수는 몇 가지 제한점이 있고 모든 상황에 사용할 수는 없습니다.

developer.mozilla.org

// 매개변수 지정 방법

() => { ... } // 매개변수가 없을 경우

x => { ... } // 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다.

(x, y) => { ... } // 매개변수가 여러 개인 경우, 소괄호를 생략할 수 없다.

​

// 함수 몸체 지정 방법

x => { return x * x } // single line block

x => x * x // 함수 몸체가 한줄의 구문이라면 중괄호를 생략할 수 있으며 암묵적으로 return된다. 위 표현과 동일하다.

() => { return { a: 1 }; }

() => ({ a: 1 }) // 위 표현과 동일하다. 객체 반환시 소괄호를 사용한다.

// 왜냐하면 딸랑 { } 쓰면 얘가 함수 블록인지 객체 블록인지 판단할수 없기 때문이다.

() => { 

// multi line block.

const x = 10;

return x * x;

};